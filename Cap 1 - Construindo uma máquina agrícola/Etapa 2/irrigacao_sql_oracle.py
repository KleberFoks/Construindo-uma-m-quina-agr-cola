import oracledb
import csv
import os

# Configura conex√£o (substitua pelos seus dados)
try:
    conn = oracledb.connect(
        user="rm562225",
        password="fiap25",
        dsn="oracle.fiap.com.br:1521/ORCL"
    )
    cursor = conn.cursor()
except Exception as e:
    print(f"‚ùå Erro ao conectar ao banco: {e}")
    exit(1)

# Cria√ß√£o da tabela (caso n√£o exista)
try:
    cursor.execute("""
    BEGIN
        EXECUTE IMMEDIATE '
        CREATE TABLE sensores_irrigacao (
            id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            fosforo_presente NUMBER(1),
            potassio_presente NUMBER(1),
            ph_simulado NUMBER(5,2),
            umidade NUMBER(5,2),
            irrigacao_ativa NUMBER(1),
            data_insercao TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )';
    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE != -955 THEN RAISE; END IF;
    END;
    """)
    conn.commit()
except Exception as e:
    print(f"‚ùå Erro ao criar tabela (se n√£o existir): {e}")

def inserir_dados(fosforo, potassio, ph, umidade, irrigacao):
    try:
        cursor.execute("""
            INSERT INTO sensores_irrigacao (
                fosforo_presente, potassio_presente, ph_simulado, umidade, irrigacao_ativa
            ) VALUES (:1, :2, :3, :4, :5)
        """, (fosforo, potassio, ph, umidade, irrigacao))
        conn.commit()
        print("‚úÖ Dados inseridos com sucesso.")
    except Exception as e:
        print(f"‚ùå Erro ao inserir dados: {e}")

def consultar_dados():
    try:
        cursor.execute("SELECT * FROM sensores_irrigacao ORDER BY data_insercao DESC")
        registros = cursor.fetchall()
        print("\n--- DADOS ARMAZENADOS ---")
        for r in registros:
            print(r)
    except Exception as e:
        print(f"‚ùå Erro ao consultar dados: {e}")

def atualizar_umidade(id_registro, nova_umidade):
    try:
        cursor.execute("""
            UPDATE sensores_irrigacao
            SET umidade = :1
            WHERE id = :2
        """, (nova_umidade, id_registro))
        conn.commit()
        print("‚úÖ Registro atualizado.")
    except Exception as e:
        print(f"‚ùå Erro ao atualizar registro: {e}")

def deletar_registro(id_registro):
    try:
        cursor.execute("DELETE FROM sensores_irrigacao WHERE id = :1", (id_registro,))
        conn.commit()
        print("üóëÔ∏è Registro removido.")
    except Exception as e:
        print(f"‚ùå Erro ao deletar registro: {e}")

def exportar_csv():
    try:
        cursor.execute("SELECT * FROM sensores_irrigacao ORDER BY data_insercao DESC")
        caminho = os.path.abspath('dados_irrigacao.csv')
        with open('dados_irrigacao.csv', mode='w', newline='') as arquivo_csv:
            escritor_csv = csv.writer(arquivo_csv)
            colunas = [desc[0] for desc in cursor.description]
            escritor_csv.writerow(colunas)
            for linha in cursor:
                escritor_csv.writerow(linha)
        print(f"‚úÖ Dados exportados para '{caminho}' com sucesso!")
    except Exception as e:
        print(f"‚ùå Erro ao exportar CSV: {e}")

def menu():
    while True:
        print("\n--- SISTEMA DE IRRIGA√á√ÉO INTELIGENTE ---")
        print("1. Inserir novo dado (manual)")
        print("2. Consultar dados")
        print("3. Atualizar umidade")
        print("4. Deletar registro")
        print("5. Exportar dados para CSV")
        print("6. Sair")
        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == "1":
            try:
                fosforo = int(input("F√≥sforo presente (1 = Sim, 0 = N√£o): "))
                potassio = int(input("Pot√°ssio presente (1 = Sim, 0 = N√£o): "))
                ph = float(input("pH simulado (0 a 14): "))
                umidade = float(input("Umidade (%): "))
                irrigacao = int(input("Irriga√ß√£o ativa (1 = Sim, 0 = N√£o): "))
                inserir_dados(fosforo, potassio, ph, umidade, irrigacao)
            except ValueError:
                print("‚ùå Entrada inv√°lida, por favor digite n√∫meros corretos.")
        elif opcao == "2":
            consultar_dados()
        elif opcao == "3":
            try:
                id_registro = int(input("ID do registro a atualizar: "))
                nova_umidade = float(input("Nova umidade (%): "))
                atualizar_umidade(id_registro, nova_umidade)
            except ValueError:
                print("‚ùå Entrada inv√°lida, digite n√∫meros corretos.")
        elif opcao == "4":
            try:
                id_registro = int(input("ID do registro a deletar: "))
                deletar_registro(id_registro)
            except ValueError:
                print("‚ùå Entrada inv√°lida, digite um n√∫mero inteiro.")
        elif opcao == "5":
            exportar_csv()
        elif opcao == "6":
            print("Saindo... At√© mais!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida.")

try:
    menu()
finally:
    cursor.close()
    conn.close()
